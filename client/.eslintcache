[{"C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\reportWebVitals.js":"1","C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\index.js":"2","C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\views\\App.js":"3","C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\views\\components\\Customer\\Customer.js":"4","C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\views\\components\\Customer\\CustomerAdd.js":"5","C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\views\\components\\Customer\\CustomerDelete.js":"6","C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\views\\components\\Customer\\CustomerCRUD.js":"7","C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\enum.js":"8"},{"size":362,"mtime":1611541067347,"results":"9","hashOfConfig":"10"},{"size":485,"mtime":1611542067758,"results":"11","hashOfConfig":"10"},{"size":486,"mtime":1611810967770,"results":"12","hashOfConfig":"10"},{"size":810,"mtime":1611810976857,"results":"13","hashOfConfig":"10"},{"size":4758,"mtime":1614246472325,"results":"14","hashOfConfig":"10"},{"size":1824,"mtime":1614306587601,"results":"15","hashOfConfig":"10"},{"size":5958,"mtime":1614301942001,"results":"16","hashOfConfig":"10"},{"size":144,"mtime":1614246674300,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1e004aq",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"23"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\reportWebVitals.js",[],["38","39"],"C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\index.js",[],["40","41"],"C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\views\\App.js",[],"C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\views\\components\\Customer\\Customer.js",["42"],"import React from 'react'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport CustomerDelete from'./CustomerDelete'\r\n\r\n\r\n\r\nfunction Customer(props) {\r\n\r\n    \r\n    return (\r\n       <TableRow>\r\n           <TableCell>{props.number}</TableCell>\r\n           <TableCell>{props.id}</TableCell>\r\n           <TableCell><img style={{width:'50px', height:'50px'}} src={props.img}/></TableCell>\r\n           <TableCell>{props.gender}</TableCell>\r\n           <TableCell>{props.name}</TableCell>\r\n           <TableCell>{props.birthday}</TableCell>\r\n           <TableCell>{props.job}</TableCell>\r\n           <TableCell><CustomerDelete  reset={props.reset} setReset={props.setReset} id={props.id}/></TableCell>\r\n       </TableRow>\r\n    )\r\n}\r\n\r\nexport default Customer","C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\views\\components\\Customer\\CustomerAdd.js",[],"C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\views\\components\\Customer\\CustomerDelete.js",[],"C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\views\\components\\Customer\\CustomerCRUD.js",["43","44","45","46"],"import React,{ Suspense, useEffect, useState } from 'react';\r\nimport Customer from './Customer'\r\nimport CustomerAdd from'./CustomerAdd'\r\nimport Table from'@material-ui/core/Table'\r\nimport TableHead from'@material-ui/core/TableHead'\r\nimport TableCell from '@material-ui/core/TableCell'\r\nimport TableRow from '@material-ui/core/TableRow'\r\nimport TableBody from'@material-ui/core/TableBody'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport CircularProgress from'@material-ui/core/CircularProgress'\r\nimport axios from'axios'\r\nimport { withRouter } from 'react-router-dom';\r\nimport url from'../../../enum'\r\n\r\nconst useStyle=makeStyles({\r\n  root:{\r\n    with :\"100%\",\r\n    marginTop : \"150px\",\r\n    overflowX:\"auto\"\r\n  },\r\n  table:{\r\n    minWidth:\"1080px\"\r\n  },\r\n  progress:{\r\n    marginTop:\"20px\"\r\n   \r\n  }\r\n})\r\n\r\nfunction CustomerCRUD(props) {\r\n\r\n  const [completed,setCompleted]=useState({progress:0})\r\n  const [customer,setCustomer]=useState([])\r\n  const [reset,setReset]=useState(true)\r\n  const [paging,setPaging]=useState({cnt:0,pageCount:0,start:0,number:0,startPage:0,endPage:0})\r\n  const [currentPage,setCurrentPage]=useState(1)\r\n  const [pageBlock,setPageBlock]=useState([])\r\n\r\n  const progressFunc =()=>{\r\n    if(completed.progress<=100){\r\n        completed.progress=parseInt(completed.progress+1)\r\n    }else{\r\n        completed.progress=1\r\n    }\r\n    setCompleted({progress:completed.progress})\r\n  }\r\n  \r\n\r\n  useEffect( async () => {\r\n    var inter=setInterval(() => {\r\n      progressFunc()\r\n    }, 150);\r\n   \r\n      await axios.get(url+'api/customers/customerBoard',{params:{currentPage:currentPage}})\r\n      .then(res=>{\r\n        //개시물 정보 가져오기\r\n        setCustomer(res.data.list)\r\n        delete res.data.list\r\n        setPaging(res.data)\r\n        //페이징 처리정보 setting\r\n        paging.cnt=res.data.cnt\r\n        paging.pageCount=res.data.pageCount\r\n        paging.start=res.data.start\r\n        paging.number=res.data.number\r\n        paging.startPage=res.data.startPage\r\n        paging.endPage=res.data.endPage\r\n        console.log(paging)\r\n        console.log(currentPage)\r\n        console.log(\"페이징!\")\r\n      })\r\n      .catch(err=>console.log(err))\r\n  \r\n \r\n    completed.progress=0\r\n    clearInterval(inter)\r\n    console.log(\"시작\"+paging.startPage)\r\n    console.log(\"끝\"+paging.endPage)\r\n    \r\n    pageBlock.length=0\r\n\r\n    let pageArray=[]\r\n    for(let i=paging.startPage; i<=paging.endPage; i++){\r\n        pageArray.push(i)\r\n        console.log(\"페이징\"+i)\r\n      }\r\n    console.log(pageArray)\r\n    setPageBlock([...pageBlock,...pageArray])\r\n    \r\n  }, [reset,currentPage])\r\n\r\n  const pageHandler=(where,pageNum)=>{\r\n      if(where==='first'){\r\n        setCurrentPage(1)\r\n      }else if(where==='last'){\r\n         setCurrentPage(paging.pageCount) \r\n      }else if(where==='plusOneStep'){\r\n        currentPage>1?setCurrentPage(currentPage-1):setCurrentPage(currentPage)\r\n      }else if(where==='minusOneStep'){\r\n        currentPage===paging.pageCount?setCurrentPage(currentPage):setCurrentPage(currentPage+1)\r\n      }else if(where==='switchPage'){\r\n        setCurrentPage(pageNum)\r\n      }\r\n\r\n      \r\n   \r\n  }\r\n  \r\n\r\n\r\n  const classes =useStyle();\r\n  return (\r\n    <Suspense fallback={(<div>loading....</div>)}>\r\n      <Paper className={classes.root}>\r\n        <Table className={classes.table}>\r\n          <TableHead>\r\n              <TableRow>\r\n                <TableCell>번호</TableCell>\r\n                <TableCell>아이디</TableCell>\r\n                <TableCell>이미지</TableCell>\r\n                <TableCell>성별</TableCell>\r\n                <TableCell>이름</TableCell>\r\n                <TableCell>생일</TableCell>\r\n                <TableCell>직업</TableCell>\r\n                <TableCell>기능</TableCell>\r\n              </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {paging.cnt>0?customer.map((value,index)=>\r\n            <>\r\n                <Customer key={index} number={paging.number-index}\r\n                          id={value.id} name={value.name}\r\n                          img={value.image} birthday={value.birthday}\r\n                          gender={value.gender} job={value.job}\r\n                          reset={reset} setReset={setReset}\r\n                          />\r\n                          {value.image}\r\n             </>             \r\n            ):\"list가 없습니다.\"}\r\n            \r\n            <TableRow>\r\n              <TableCell colSpan=\"6\" align=\"center\">\r\n                  <CircularProgress className={classes.progress} variant=\"determinate\" value={completed.progress}/>\r\n              </TableCell>\r\n            </TableRow>\r\n            <TableRow>\r\n                <TableCell>\r\n                    <p onClick={()=>pageHandler('first')}>처음으로</p>\r\n                </TableCell>\r\n                <TableCell>\r\n                    <p onClick={()=>pageHandler('plusOneStep')}>{'<'}</p>\r\n                </TableCell>\r\n                <TableCell>\r\n                  {pageBlock.map((value,index)=>{\r\n                    return value!==currentPage?<a key={index} onClick={()=>pageHandler('switchPage',value)} >[{value}]</a>:<a  onClick={()=>pageHandler('switchPage',value)} key={index} style={{fontSize:'25px'}}>[{value}]</a>\r\n                  })}\r\n                </TableCell>\r\n                <TableCell>\r\n                    <p onClick={()=>pageHandler('minusOneStep')}>{'>'}</p>\r\n                </TableCell>\r\n                <TableCell>\r\n                    <p onClick={()=>pageHandler('last')}>마지막으로</p>\r\n                </TableCell>\r\n            </TableRow>\r\n          </TableBody>\r\n        </Table>\r\n      </Paper>\r\n      <div style={{display:'flex',flexDirection:'column', alignItems:'center',width:'100%'}} >\r\n        <CustomerAdd reset={reset} setReset={setReset}/>\r\n      </div>\r\n    </Suspense>\r\n   \r\n  );\r\n}\r\n\r\nexport default withRouter(CustomerCRUD);\r\n","C:\\Users\\jmyoo.BDAPPS-HAN\\Desktop\\boiler\\node-mysql\\client\\src\\enum.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"47","replacedBy":"51"},{"ruleId":"49","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":15,"column":23,"nodeType":"55","endLine":15,"endColumn":83},{"ruleId":"56","severity":1,"message":"57","line":50,"column":14,"nodeType":"58","endLine":90,"endColumn":4},{"ruleId":"56","severity":1,"message":"59","line":90,"column":6,"nodeType":"60","endLine":90,"endColumn":25,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":155,"column":48,"nodeType":"55","endLine":155,"endColumn":110},{"ruleId":"62","severity":1,"message":"63","line":155,"column":124,"nodeType":"55","endLine":155,"endColumn":212},"no-native-reassign",["64"],"no-negated-in-lhs",["65"],["64"],["65"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'completed', 'pageBlock', 'paging', and 'progressFunc'. Either include them or remove the dependency array. You can also do a functional update 'setPageBlock(p => ...)' if you only need 'pageBlock' in the 'setPageBlock' call.","ArrayExpression",["66"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-global-assign","no-unsafe-negation",{"desc":"67","fix":"68"},"Update the dependencies array to be: [reset, currentPage, completed, paging, pageBlock, progressFunc]",{"range":"69","text":"70"},[2611,2630],"[reset, currentPage, completed, paging, pageBlock, progressFunc]"]